import express, { type Request, Response, NextFunction } from "express";
import cookieParser from "cookie-parser";
import { registerRoutes } from "./routes";
import { setupVite, log } from "./vite";
import path from "path";
import { fileURLToPath } from "url";
import fs from "fs";

const app = express();

// Trust all proxies for secure cookies behind Replit multi-hop proxy
app.set("trust proxy", true);

// Health check endpoint (DB ÏùòÏ°¥ÏÑ± ÏóÜÏùå, Ï¶âÏãú ÏùëÎãµ)
app.get("/health", (_req, res) => {
  res.status(200).json({ status: "ok" });
});

app.use(express.json());
app.use(express.urlencoded({ extended: false }));

// Session secret Í≤ÄÏ¶ù
if (!process.env.SESSION_SECRET) {
  console.error("‚ùå SESSION_SECRET is not set!");
  throw new Error("SESSION_SECRET must be set. Please add it to your environment variables.");
}

// ÌôòÍ≤Ω Í∞êÏßÄ: Replit ÎèÑÎ©îÏù∏ Í∞êÏßÄ (Í∞úÎ∞ú/Î∞∞Ìè¨ Î™®Îëê HTTPS ÏÇ¨Ïö©)
const isReplit = !!process.env.REPLIT_DOMAINS;

console.log(`üîí Cookie mode: ${isReplit ? 'REPLIT (secure:true, sameSite:none)' : 'LOCALHOST (secure:false, sameSite:lax)'}`);

// ÏÑúÎ™ÖÎêú Ïø†ÌÇ§ ÌååÏÑú (OAuth ÏôÑÏ†Ñ stateless Ïù∏Ï¶ù)
app.use(cookieParser(process.env.SESSION_SECRET));

console.log("‚úÖ Using stateless signed cookies for OAuth authentication");

app.use((req, res, next) => {
  const start = Date.now();
  const path = req.path;
  let capturedJsonResponse: Record<string, any> | undefined = undefined;

  const originalResJson = res.json;
  res.json = function (bodyJson, ...args) {
    capturedJsonResponse = bodyJson;
    return originalResJson.apply(res, [bodyJson, ...args]);
  };

  res.on("finish", () => {
    const duration = Date.now() - start;
    if (path.startsWith("/api")) {
      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;
      if (capturedJsonResponse) {
        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
      }

      if (logLine.length > 80) {
        logLine = logLine.slice(0, 79) + "‚Ä¶";
      }

      log(logLine);
    }
  });

  next();
});

(async () => {
  try {
    // 1Ô∏è‚É£ Î®ºÏ†Ä HTTP ÏÑúÎ≤Ñ ÏÉùÏÑ±
    const { createServer } = await import("http");
    const server = createServer(app);
    
    const port = parseInt(process.env.PORT || '5000', 10);
    
    // 2Ô∏è‚É£ Ï¶âÏãú ÏÑúÎ≤Ñ ÏãúÏûë (Ìó¨Ïä§ Ï≤¥ÌÅ¨ ÏùëÎãµ Í∞ÄÎä•)
    server.listen(port, "0.0.0.0", () => {
      log(`‚úÖ Server listening on port ${port} (health check ready)`);
    });

    // 3Ô∏è‚É£ Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú ÎùºÏö∞Ìä∏ Î∞è Ï†ïÏ†Å ÌååÏùº ÏÑ§Ï†ï
    (async () => {
      try {
        // ÎùºÏö∞Ìä∏ Îì±Î°ù (ÎπÑÎèôÍ∏∞ ÏûëÏóÖ)
        await registerRoutes(app);
        log("‚úÖ Routes registered");

        // ÏóêÎü¨ Ìï∏Îì§Îü¨
        app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {
          const status = err.status || err.statusCode || 500;
          const message = err.message || "Internal Server Error";
          res.status(status).json({ message });
          throw err;
        });

        // Ï†ïÏ†Å ÌååÏùº ÏÑ§Ï†ï
        if (app.get("env") === "development") {
          await setupVite(app, server);
          log("‚úÖ Vite dev server ready");
        } else {
          const possiblePaths = [
            path.resolve(import.meta.dirname, "..", "dist", "public"),
            path.resolve(import.meta.dirname, "public"),
            path.resolve(process.cwd(), "dist", "public"),
            path.join("/app", "dist", "public")
          ];
          
          let distPath: string | null = null;
          for (const testPath of possiblePaths) {
            if (fs.existsSync(testPath)) {
              distPath = testPath;
              log(`Found static files at: ${distPath}`);
              break;
            }
          }
          
          if (!distPath) {
            const errorMsg = `Could not find build directory. Tried: ${possiblePaths.join(", ")}`;
            log(errorMsg);
            throw new Error(errorMsg);
          }
          
          app.use(express.static(distPath));
          app.use("*", (_req, res) => {
            res.sendFile(path.resolve(distPath!, "index.html"));
          });
          log("‚úÖ Static files ready");
        }
      } catch (error) {
        console.error("‚ö†Ô∏è  Background initialization error:", error);
      }
    })();

  } catch (error) {
    console.error("‚ùå Fatal startup error:", error);
    process.exit(1);
  }
})();
